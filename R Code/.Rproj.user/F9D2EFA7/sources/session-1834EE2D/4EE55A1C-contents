# Load libraries
library(MFPCA)
require(fda)
library(tidyr)
library(readxl)
library(cluster)
library(ggplot2)
library(dplyr)
library(fdm2id)
library(flexclust)
library(cvTools)
library(readr)
library(tidyverse)
library(clValid)
library(ggthemes)
library(gridExtra)
library(ggpubr)
library(grid)
library(factoextra)


#### Load and plot the data ####

 AllFoot = read_excel(paste("Z:/RESEARCH/IOR Foot Model",
                            "/Planovalgus Foot Deformity/MatlabExports/AllKinesTable.xlsx",sep = ""))
 
 DemoData = read_excel(paste("Z:/RESEARCH/IOR Foot Model/",
                            "Planovalgus Foot Deformity/MatlabExports/DemosTable.xlsx", sep = ""))
 
 # AllFoot = read_excel(paste("C:/Users/dugan/Documents/GitHubRepos/IOR_FOOT_MFPCA",
 #                            "/Data/AllKinesTable.xlsx",sep = ""))
 # 
 # DemoData = read_excel(paste("C:/Users/dugan/Documents/GitHubRepos",
 #                             "/IOR_FOOT_MFPCA/Data/DemosTable.xlsx", sep = ""))
 
 
## subset by age ---------------------------------------------------------------
exclude = which(DemoData$Age > 30 & DemoData$Age < 5)  
 
KineData <- AllFoot[ ! AllFoot$Subject %in% exclude, ]
DemoData2 <- DemoData[DemoData$Age > 4 | DemoData$Age < 31, ]

## subset by age & diagnosis ---------------------------------------------------

exclude2 = which(DemoData2$Diagnosis != "Cerebral Palsy")
AllFoot3 = KineData[!KineData$Subject %in% exclude2, ]
DemoData3 = DemoData2[DemoData2$Diagnosis == "Cerebral Palsy",]

## Set which Data to use: Change AllFoot and DemoData to match above.

KineData = AllFoot3
SubData = DemoData3

## Arrange data for MFPCA

ShaCalX = subset(KineData, Graph == 1)
ShaCalX<- data.frame(ShaCalX, row.names = 1)
ShaCalX = ShaCalX[, -c(1:3)]
ShaCalX = data.matrix(ShaCalX)

CalMetZ = subset(KineData, Graph == 2)
CalMetZ <- data.frame(CalMetZ, row.names = 1)
CalMetZ = CalMetZ[, -c(1:3)]
CalMetZ = data.matrix(CalMetZ)

CalMetY = subset(KineData, Graph == 4)
CalMetY <- data.frame(CalMetY, row.names = 1)
CalMetY = CalMetY[, -c(1:3)]
CalMetY = data.matrix(CalMetY)

set.seed(1234)

myIOR <- multiFunData(funData(argvals = seq(from=1, to=101, by=1), X = ShaCalX), 
                      funData(argvals = seq(from=1, to=101, by=1), X = CalMetZ),
                      funData(argvals = seq(from=1, to=101, by=1), X = CalMetY))

# plot the data
par(mar = c(4,2.5,0.5,0.5) + 0.1, cex.axis = 1.5, cex.lab = 1.5)

plot(myIOR[[1]], col = "gray", xlab = "Percent Stance")
legend("topleft", legend = "", title = "Sha_Cal Eversion", cex = 1.25, bty = "n")

plot(myIOR[[2]], col = "gray", xlab = "Percent Stance")
legend("topleft", legend = "", title = "Cal_Met Dorsiflexion", cex = 1.25, bty = "n")

plot(myIOR[[3]], col = "gray", xlab = "Percent Stance")
legend("topleft", legend = "", title = "Cal_Met Adduction", cex = 1.25, bty = "n")



#### MFPCA calculation ####
set.seed(1234)
MFPCAIOR <- MFPCA(myIOR, M = 5, uniExpansions = list(list(type = "splines1Dpen"),
                                                     list(type = "splines1Dpen"),
                                                     list(type = "splines1Dpen"))) # for 3 time series


#### Comparison to univariate FPCA (Fig. 1) ####

# calculate the univariate FPCA for the gait data
pca1 <- PACE(myIOR[[1]], npc = 5)
pca2 <- PACE(myIOR[[2]], npc = 5)
pca3 <- PACE(myIOR[[3]], npc = 5) # for 3 time series

# rescale multivariate functions to norm 1 one each interval
MFPCAIOR$functions[[1]] <- MFPCAIOR$functions[[1]]/funData::norm(MFPCAIOR$functions[[1]], squared = F)
MFPCAIOR$functions[[2]] <- MFPCAIOR$functions[[2]]/funData::norm(MFPCAIOR$functions[[2]], squared = F)
MFPCAIOR$functions[[3]] <- MFPCAIOR$functions[[3]]/funData::norm(MFPCAIOR$functions[[3]], squared = F) # for 3 time series

# flip univariate functions for comparison purposes

# for 3 time series
uFPCA <- multiFunData(flipFuns(MFPCAIOR$functions[[1]], pca1$functions),
                      flipFuns(MFPCAIOR$functions[[2]], pca2$functions),
                      flipFuns(MFPCAIOR$functions[[3]], pca2$functions))

# "flip" associate scores
pca1$scores[,2:3] <- -1 * pca1$scores[,2:3]


screeplot(MFPCAIOR, type = "barplot")
plot(MFPCAIOR, combined = TRUE)
scoreplot(MFPCAIOR)


PC1scores = MFPCAIOR$scores[,1]
PC2scores = MFPCAIOR$scores[,2]
NCO = subset(KineData, Graph == 1)
NCO = NCO$NCO
df <- data.frame(PC1scores,PC2scores,NCO)

ggplot(df, aes(x=PC1scores, y=PC2scores, color=NCO)) +
  geom_point()


## Hierachrial Cluster Analysis 
df_HC = data.frame(PC1scores,PC2scores)
# Compute distance matrix
res.dist <- dist(df_HC, method = "euclidean")

#hc1 <- hclust(res.dist, method = "complete")
hc_ward <- hclust(res.dist, method = "ward.D2")

# Plot Results of Hierachial Clustering
dend_ward <- as.dendrogram (hc_ward)
plot(hc_ward, cex = 0.6, hang = -1)
rect.hclust(hc_ward,5)

express = MFPCAIOR$scores[,1:2]
set.seed(1234)
intern = clValid(express, 2:6, clMethods=c("kmeans"), validation="internal")

summary(intern)





## kmeans Analysis Elbow plot

fviz_nbclust(MFPCAIOR$scores[,1:2], kmeans, method = "wss")

## Set # of Clusters
cnum = 5

## k-means cluster analysis
set.seed(1234)
kmeans.all <- kmeans(MFPCAIOR$scores[,1:2], centers = cnum, nstart = 25, iter.max = 50 )

## combine original data for full analysis
subnum = c(1:nrow(SubData))
PatientData = data.frame(subnum, SubData$MAL_Num, MFPCAIOR$scores[,1], MFPCAIOR$scores[,2],kmeans.all$cluster)

PatientData = PatientData%>%
  rename(PC1 = MFPCAIOR.scores...1.,
         PC2 = MFPCAIOR.scores...2.)

kmeans.AllCenters = NULL
kmeans.AllCenters$X = kmeans.all$centers[,1] 
kmeans.AllCenters$Y = kmeans.all$centers[,2]

kmeans.AllCenters <- as.data.frame(kmeans.AllCenters) %>% mutate(clusterNumOrig = row_number())
kmeans.AllCenters <- kmeans.AllCenters %>% arrange(X)
kmeans.AllCenters<-kmeans.AllCenters %>% mutate(clusterNumCen = row_number())

for (i in 1:nrow(PatientData)){
  if (PatientData[i,"kmeans.all.cluster"] == kmeans.AllCenters$clusterNumOrig[1]){
    PatientData$CenClust[i] = kmeans.AllCenters$clusterNumCen[1]
  } else if (PatientData[i,"kmeans.all.cluster"] == kmeans.AllCenters$clusterNumOrig[2]){
    PatientData$CenClust[i] = kmeans.AllCenters$clusterNumCen[2]
  }else if (PatientData[i,"kmeans.all.cluster"] == kmeans.AllCenters$clusterNumOrig[3]){
    PatientData$CenClust[i] = kmeans.AllCenters$clusterNumCen[3]
  }else if (PatientData[i,"kmeans.all.cluster"] == kmeans.AllCenters$clusterNumOrig[4]){
    PatientData$CenClust[i] = kmeans.AllCenters$clusterNumCen[4]
  }else 
    PatientData$CenClust[i] = kmeans.AllCenters$clusterNumCen[5]
}


## K-fold analysis
K = 5
set.seed(1234) # set seed for reproducibility
flds = cvFolds(nrow(SubData), K, type = "random")

df_cvfolds = as.data.frame(flds$subsets)
df_cvfolds$group = flds$which
df_cvfolds = df_cvfolds %>%
  rename(subnum = V1)


# update Patient data with cluster assignments
PatientData = merge(PatientData,df_cvfolds,by = "subnum")

# plot all data clusters

ggplot(PatientData, aes(x=PC1, y=PC2, color= as.factor(CenClust))) +
  geom_point()


## kfold analysis function
kfoldAnalysis <- function(PatientData, group) {
  
  PatientData[["train"]] <- TRUE
  ind = which(PatientData$group == group)  
  PatientData[["train"]][ind] <- FALSE
  
  set.seed(1234)
  df_holdout = kcca(PatientData[PatientData[["train"]]==TRUE, 3:4],
                    k=cnum, family = kccaFamily("kmeans"))
  
  set.seed(1234)
  pred_train <- predict(df_holdout)
  set.seed(1234)
  pred_test <- predict(df_holdout, newdata=PatientData[PatientData[["train"]]==FALSE, 3:4])
  
  image(df_holdout)
  points(PatientData[PatientData[["train"]]==TRUE, 3:4], col=pred_train, pch=19, cex=0.3)
  points(PatientData[PatientData[["train"]]==FALSE, 3:4], col=pred_test, pch=22, bg="orange")
  
  #Get Centers for Test data with group 1 held out
  df_holdout.Centers = as.data.frame(df_holdout@centers)
  #Reorder centers
  df_holdout.Centers <- df_holdout.Centers %>% mutate(clusterNumOrig = row_number())
  df_holdout.Centers <- df_holdout.Centers %>% arrange(PC1)
  df_holdout.Centers<-df_holdout.Centers %>% mutate(clusterNumCen = row_number())
  
  ## Convert cluster number to cluster numbers based on center location
  
  testdata = PatientData[PatientData$group == group,]
  testdata$OrigClust = pred_test
  
  for (i in 1:nrow(testdata)){
    if (testdata[i,"OrigClust"] ==df_holdout.Centers$clusterNumOrig[1]){
      testdata$NewClust[i] = df_holdout.Centers$clusterNumCen[1]
    } else if (testdata[i,"OrigClust"] == df_holdout.Centers$clusterNumOrig[2]){
      testdata$NewClust[i] = df_holdout.Centers$clusterNumCen[2]
    }else if (testdata[i,"OrigClust"] == df_holdout.Centers$clusterNumOrig[3]){
      testdata$NewClust[i] = df_holdout.Centers$clusterNumCen[3]
    }else if (testdata[i,"OrigClust"] == df_holdout.Centers$clusterNumOrig[4]){
      testdata$NewClust[i] = df_holdout.Centers$clusterNumCen[4]
    }else 
      testdata$NewClust[i] = df_holdout.Centers$clusterNumCen[5]
  }
  
  return(testdata)
  
}

test1data = kfoldAnalysis(PatientData,1)
test2data = kfoldAnalysis(PatientData,2)
test3data = kfoldAnalysis(PatientData,3)
test4data = kfoldAnalysis(PatientData,4)
test5data = kfoldAnalysis(PatientData,5)


AggData = rbind(test1data,test2data,test3data, test4data, test5data)
pctAll <- mean(AggData[,"CenClust"] == AggData[, "NewClust"])
pctAll

graphClust = ggplot(AggData, aes(x=PC1, y=PC2, color= as.factor(CenClust), shape = as.factor(CenClust))) +
  geom_point(size = 2.5)+
  labs(title="kmeans cluster analysis")+
  theme_minimal()+
  theme(legend.title = element_blank(),axis.text.x=element_blank(),
        axis.text.y=element_blank())

graphClust2 = ggplot(AggData, aes(x=PC1, y=PC2, color= as.factor(CenClust))) +
  geom_point(shape=15,size = 2.5)+
  scale_color_discrete(labels = c("Cluster 1:Severe Pronovalgus", "Cluster 2:Moderate Pronovalgus",
                                  "Cluster 3:Planus", "Cluster4:Neutral", "Cluster 5:Supovarus"))+
  labs(title="kmeans cluster analysis")+
  labs(color = "Clusters")+
  theme_minimal()+
  theme(axis.text.x=element_blank(),
        axis.text.y=element_blank())
  
 

write.csv(AggData, "Z:\\RESEARCH\\IOR Foot Model\\Planovalgus Foot Deformity\\R Exports\\AggData.csv",
          row.names=FALSE)


## Plot IOR data by Kmeans Group 

#ShaCalX
df_ShaCalX_temp1 = subset(AggData, select=c("subnum", "SubData.MAL_Num", "CenClust"))
df_ShaCalX_temp2 = as.data.frame(ShaCalX)
df_ShaCalX_temp2 <- tibble::rownames_to_column(df_ShaCalX_temp2, "subnum")

df_ShaCalX = merge(df_ShaCalX_temp1,df_ShaCalX_temp2,by="subnum")

df_ShaCalX_mean = df_ShaCalX %>%
  group_by(CenClust) %>%
  summarise_at( .vars = names(.)[4:104], mean)

# #explore
# df_ShaCalX$subnum = as.factor(df_ShaCalX$subnum)
# df_ShaCalX_All <- gather(df_ShaCalX, stance, deg, X1:X101, factor_key=TRUE)
# df_ShaCalX_All$stance <- sapply(df_ShaCalX_All$stance, function(x) gsub("X", "",  x))
# df_ShaCalX_All$stance = as.numeric(df_ShaCalX_All$stance)
# 
# ggplot(df_ShaCalX_All, aes(x = stance, y = deg, color = as.factor(CenClust), group = subnum)) +
#   geom_line(key_glyph = draw_key_rect, size=1)+
#   scale_color_discrete(labels = c("Severe Pronovalgus", "Moderate Pronovalgus",
#                                   "Planus", "Neutral", "Supovarus"))+
#   scale_x_continuous(name = "Percent Stance",breaks=seq(1,101,20),labels=c(0,20,40,60,80,100))+
#   labs(title="Sha-Cal (Eversion +)",
#        x ="Percent Stance", y = "Degrees") +
#   labs(color = "Clusters")+
#   scale_y_continuous(breaks=seq(-30,30,10),limits = c(-30,30))+
#   theme_minimal()
## ----
df_ShaCalX_mean_L <- gather(df_ShaCalX_mean, stance, deg, X1:X101 ,factor_key=TRUE)
df_ShaCalX_mean_L$stance <- sapply(df_ShaCalX_mean_L$stance, function(x) gsub("X", "",  x))
df_ShaCalX_mean_L$stance = as.numeric(df_ShaCalX_mean_L$stance)

graphShaCalx = ggplot(df_ShaCalX_mean_L, aes(x = stance, y = deg, color = as.factor(CenClust))) +
  geom_line(key_glyph = draw_key_rect, size=1)+
  scale_color_discrete(labels = c("Severe Pronovalgus", "Moderate Pronovalgus",
                                  "Planus", "Neutral", "Supovarus"))+
  scale_x_continuous(name = "Percent Stance",breaks=seq(1,101,20),labels=c(0,20,40,60,80,100))+
  labs(title="Sha-Cal (Eversion +)",
       x ="Percent Stance", y = "Degrees") +
  labs(color = "Clusters")+
  scale_y_continuous(breaks=seq(-30,30,10),limits = c(-30,30))+
  theme_minimal()


#CalMetZ
df_CalMetZ_temp1 = subset(AggData, select=c("subnum", "SubData.MAL_Num", "CenClust"))
df_CalMetZ_temp2 = as.data.frame(CalMetZ)
df_CalMetZ_temp2 <- tibble::rownames_to_column(df_CalMetZ_temp2, "subnum")

df_CalMetZ = merge(df_CalMetZ_temp1,df_CalMetZ_temp2,by="subnum")

df_CalMetZ_mean = df_CalMetZ %>%
  group_by(CenClust) %>%
  summarise_at( .vars = names(.)[4:104], mean)

df_CalMetZ_mean_L <- gather(df_CalMetZ_mean, stance, deg, X1:X101 ,factor_key=TRUE)
df_CalMetZ_mean_L$stance <- sapply(df_CalMetZ_mean_L$stance, function(x) gsub("X", "",  x))
df_CalMetZ_mean_L$stance = as.numeric(df_CalMetZ_mean_L$stance)

graphCalMetZ = ggplot(df_CalMetZ_mean_L, aes(x = stance, y = deg, color = as.factor(CenClust))) +
  geom_line(key_glyph = draw_key_rect, size = 1)+
  scale_color_discrete(labels = c("Severe Pronovalgus", "Moderate Pronovalgus",
                                 "Planus", "Neutral", "Supovarus"))+
  scale_x_continuous(name = "Percent Stance",breaks=seq(1,101,20),labels=c(0,20,40,60,80,100))+
  labs(title="Cal-Met (Dorsiflexion +)",
       y = "Degrees") +
  labs(color = "Clusters")+
  ylim(-60, 20)+
  theme_minimal()
  

#CalMetY
df_CalMetY_temp1 = subset(AggData, select=c("subnum", "SubData.MAL_Num", "CenClust"))
df_CalMetY_temp2 = as.data.frame(CalMetY)
df_CalMetY_temp2 <- tibble::rownames_to_column(df_CalMetY_temp2, "subnum")

df_CalMetY = merge(df_CalMetY_temp1,df_CalMetY_temp2,by="subnum")

df_CalMetY_mean = df_CalMetY %>%
  group_by(CenClust) %>%
  summarise_at( .vars = names(.)[4:104], mean)

df_CalMetY_mean_L <- gather(df_CalMetY_mean, stance, deg, X1:X101 ,factor_key=TRUE)
df_CalMetY_mean_L$stance <- sapply(df_CalMetY_mean_L$stance, function(x) gsub("X", "",  x))
df_CalMetY_mean_L$stance = as.numeric(df_CalMetY_mean_L$stance)

graphCalMetY = ggplot(df_CalMetY_mean_L, aes(x = stance, y = deg, color = as.factor(CenClust))) +
  geom_line(key_glyph = draw_key_rect,size = 1)+
  scale_color_discrete(labels = c("Severe Pronovalgus", "Moderate Pronovalgus",
                                  "Planus", "Neutral", "Supovarus"))+
  scale_x_continuous(name = "Percent Stance",breaks=seq(1,101,20),labels=c(0,20,40,60,80,100))+
  labs(title="Cal-Met (Adduction +)",
        x ="Percent Stance", y = "Degrees") +
  labs(color = "Clusters")+
  scale_y_continuous(breaks=seq(-30,30,10),limits = c(-30,30))+
  theme_minimal()


# Make Panel Plot
# grid.arrange(graphClust, graphCalMetZ, graphShaCalx, graphCalMetY, nrow = 2)
# 
# grid.arrange(grobs = list(graphClust, graphCalMetZ, graphShaCalx, graphCalMetY), top = "Figure 1", ncol=2)
# 
# ggarrange(graphClust, graphCalMetZ, graphShaCalx, graphCalMetY, ncol=2, nrow=2, common.legend = TRUE, legend="right")


# using common legend


get_legend<-function(a.gplot){
  tmp <- ggplot_gtable(ggplot_build(a.gplot))
  leg <- which(sapply(tmp$grobs, function(x) x$name) == "guide-box")
  legend <- tmp$grobs[[leg]]
  return(legend)}


Clust_legend <- get_legend(graphClust2)

grid.arrange(arrangeGrob(graphClust2 + theme(legend.position="none"), 
                         graphCalMetZ + theme(legend.position="none"),
                         graphShaCalx + theme(legend.position = "none"),
                         graphCalMetY + theme(legend.position = "none"),
                         ncol = 2, nrow=2), 
             Clust_legend, 
             nrow = 1,
             widths = c(3/4,1/4),
             top = textGrob("Figure 1: Cluster Analysis and Kinematic Results by Group",
                            gp=gpar(fontsize=14,font=2),x = 0, hjust = 0))









## Get Subject demographics
SubDataCollapse = SubData[!duplicated(SubData$MAL_Num), ]  
SubDataCollapse$Age = as.numeric(SubDataCollapse$Age)
SubDataCollapse$Height = as.numeric(SubDataCollapse$Height)
SubDataCollapse$Weight = as.numeric(SubDataCollapse$Weight)
# Get summary stastics of age, height, weight 
StatOut = SubDataCollapse %>%
  summarise(
    mean_age = mean(Age, na.rm = TRUE),
    sd_age = sd(Age, na.rm = TRUE),
    mean_height = mean(Height, na.rm = TRUE),
    sd_height = sd(Height, na.rm = TRUE),
    mean_weight = mean(Weight, na.rm = TRUE),
    sd_weight = sd(Weight, na.rm = TRUE)
  )

GenderOut = SubDataCollapse %>%
  group_by(Gender) %>%
  summarise(n = n()) %>%
  mutate(Freq = n/sum(n))

DiagOut = SubDataCollapse %>%
  group_by(Diagnosis) %>%
  summarise(n = n()) %>%
  mutate(Freq = n/sum(n))




